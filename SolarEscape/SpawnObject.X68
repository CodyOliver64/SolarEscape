*-----------------------------------------------------------
* Title      :
* Written by :
* Date       :
* Description:  This file is responsible for the management of all game Objects (enemies/coins).
*               Its two main subroutines will update the objects and print them to the screen, resetting them when they reach the end 
*               of the play area. It is also responsible for the randomly generated values that determine the objects position/speed 
*-----------------------------------------------------------

OBJ_WIDTH      equ 20
OBJ_HEIGHT     equ 20

OBJ_START_X    equ 850
OBJ_STOP_X     equ 0
MAX_SPEED      equ 12
MAX_BOTTOM_Y   equ 590
HEIGHT_OFFSET  equ 110

*Loops through all enemies and coins and draws them to the screen using the BitMapDisplay subroutine

*D1 = Left X Pos D2 = Upper Y Pos, D6 = Object Active Flag, D5 = Coin Loop Counter, D6 = Enemy Loop Counter
*A0 = Object Image, A1 = Left X Table Pointer, A2 = Top Y Table Pointer, A3 = Object Active Table Pointer 
drawObjects              
        movem.l ALL_REG,-(sp)
        
        lea     leftXTable,a1       *set object properties
        lea     topYTable,a2
        lea     objActiveTable,a3
        lea     coinImage,a0
        
        move.l  #2,d7               *set loop counters to coins-1 & enemies
        move.l  #3,d5
        
drawObjectLoop:
        move.l  (a1)+,d1 
        move.l  (a2)+,d2
        move.l  (a3)+,d6
 
        cmpi    #0,d6               *skip draw if object is inactive
        beq     skipDraw

        jsr     reprintObject      
skipDraw:
        subi    #1,d7               *check loop counter to draw all coins
        bpl     drawObjectLoop
        
        lea     enemyImage,a0       *reset loop counter for enemies and switch bmp file
        subi    #1,d5               *check loop counter to draw all enemies
        bpl     drawObjectLoop
        
        movem.l (sp)+,ALL_REG
        rts


*Loops through all enemies/coins, updating their positions and checking if they need to be reset when reaching end of screen
*On reset the speed and Y position of the object will be randomly generated by calling the resetObject subroutine

*A1 = Left X Table Pointer, A2 = Top Y Table Pointer, A3 = Object Active Table Pointer, A4 = Object Speed Table Pointer
*D5 = Speed Holder, D7 = Loop Counter 
updateObjects
      
        movem.l ALL_REG,-(sp)
         
        lea     leftXTable,a1       *set object properties
        lea     topYTable,a2
        lea     objActiveTable,a3
        lea     objSpeedTable,a4
        move.l  #6,d7               *set loop counter

updateObjectLoop:
        move.l  (a4),d5             *update X position and check if reset is needed
        sub.l   d5,(a1)
        bpl     skipReset
        jsr     resetObject
     
skipReset:
        add.l   #4,a1               *increment table pointers (add 4 for 4 bytes in a long)
        add.l   #4,a2
        add.l   #4,a3
        add.l   #4,a4
        
        subi    #1,d7               *check loop counter to update all objects
        bne     updateObjectLoop

        movem.l (sp)+,ALL_REG
        rts


*Resets all objects when they reach the end of the screen. Uses helper function to obtain a random value in a specific range
resetObject
        move.l  #OBJ_START_X,(a1) *reset X position
        lea     RANDOMVAL,a5
  
        move.l  #MAX_BOTTOM_Y,d6        *set mod/offset value for height
        move.l  #HEIGHT_OFFSET,d3
	    jsr     getRandomVal
	    
        move.l  d2,(a2)                 *apply random height
     
        move.l  #MAX_SPEED,d6           *set mod/offset value for speed
        move.l  speedOffset,d3
	    jsr     getRandomVal
	    
        move.l  d2,(a4)                 *apply random speed
	    move.l  #1,(a3)                 *set object active
	    
	    rts


*Helper function derived from randomnumbers sample code with added mod functionality to limit random range
getRandomVal
        move.l  (a5),d1
	    move.l	#$AF-$100,d0
	    move.l	#18,d2			*set loop counter
keepLooping:
	    add.l	d1,d1			*shift left 1 bit
	    bcc.s	doneLooping		*if bit not set skip feedback
        eor.b	d0,d1			*Galois LFSR feedback
doneLooping:
	    dbf	    d2,keepLooping
	    move.l  d1,(a5)         *save new seed
	    
	    clr.l   d5
        move.w  d1,d5
	    divu    d6,d5           *mod random value to get range
        swap    d5
        add.l   d3,d5           *apply offset
        move.w  d5,d2
	    rts
	    
	    
resetObjectStats
        move.l  #250,coin1TopY  *reset Y position
        move.l  #370,coin2TopY
        move.l  #500,coin3TopY
        move.l  #300,enemy1TopY
        move.l  #460,enemy2TopY
        move.l  #550,enemy3TopY  

        move.l  #850,coin1LeftX  *reset X position
        move.l  #850,coin2LeftX
        move.l  #850,coin3LeftX
        move.l  #850,enemy1LeftX
        move.l  #850,enemy2LeftX
        move.l  #850,enemy3LeftX 

        move.l  #3,coin1Speed   *reset speed
        move.l  #8,coin2Speed 
        move.l  #5,coin3Speed 
        move.l  #8,enemy1Speed 
        move.l  #8,enemy2Speed 
        move.l  #5,enemy3Speed  
        
        move.l  #1,coin1Active   *reset active flag
        move.l  #1,coin2Active 
        move.l  #1,coin3Active
        move.l  #1,enemy1Active
        move.l  #1,enemy2Active
        move.l  #1,enemy3Active
        
        move.l  #1,jumpFlag

        rts 

  


topYTable: 
coin1TopY           dc.l 250
coin2TopY           dc.l 370
coin3TopY           dc.l 500
enemy1TopY          dc.l 300
enemy2TopY          dc.l 460
enemy3TopY          dc.l 550 

leftXTable
coin1LeftX          dc.l 850
coin2LeftX          dc.l 850 
coin3LeftX          dc.l 850
enemy1LeftX         dc.l 850
enemy2LeftX         dc.l 850
enemy3LeftX         dc.l 850
  
objSpeedTable
coin1Speed          dc.l 3 
coin2Speed          dc.l 8
coin3Speed          dc.l 5
enemy1Speed         dc.l 8 
enemy2Speed         dc.l 8
enemy3Speed         dc.l 5

objActiveTable
coin1Active         dc.l 1
coin2Active         dc.l 1
coin3Active         dc.l 1
enemy1Active        dc.l 1
enemy2Active        dc.l 1
enemy3Active        dc.l 1

speedOffset         dc.l 5
speedInterval       dc.l 0
speedThreshold      dc.l 2

  
RANDOMVAL           ds.l    1
            







































*~Font name~Courier New~
*~Font size~10~
*~Tab type~1~
*~Tab size~4~
